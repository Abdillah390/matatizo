'use strict';
//var L, MaterialZoomControl;

var L = require('leaflet');
//
//L.Control = require('material-control');

var zoomControl = L.Control.extend({
  options: {
    position: 'topright',
    zoomInText: '+',
    zoomInTitle: 'Zoom in',
    zoomOutText: '-',
    zoomOutTitle: 'Zoom out',
    zoomHomeText: 'H',
    zoomHomeTitle: 'Zoom home'
  },
  onAdd: function(map) {
//    console.log('zoom.options: ' + JSON.stringify(this.options))
    var container, controlName, options;
    controlName = 'gin-control-zoom';
    container = L.DomUtil.create('div', 'leaflet-control-zoom-mdl leaflet-bar-mdl');
    options = this.options;
    options.zoomInText = options.zoomInText === '+' ? 'add' : options.zoomInText;
    options.zoomHomeText = options.zoomHomeText === 'H' ? 'add' : options.zoomHomeText;
    options.zoomOutText = options.zoomOutText === '-' ? 'remove' : options.zoomInText;
    this._zoomInButton = this._createMaterialButton('leaflet-zoom-in-mdl mdl-button-icon', options.zoomInText, options.zoomInTitle, container);
    this._zoomHomeButton = this._createMaterialButton('leaflet-zoom-in-mdl ', '<i class="material-icons">home</i>', options.zoomHomeTitle, container);
    this._zoomOutButton = this._createMaterialButton('leaflet-zoom-out-mdl', options.zoomOutText, options.zoomOutTitle, container);
    this._addZoomFunction(this._zoomInButton, this._zoomIn);
    this._addZoomFunction(this._zoomHomeButton, this._zoomHome);
    this._addZoomFunction(this._zoomOutButton, this._zoomOut);
    this._updateDisabled();
    map.on('zoomend zoomlevelschange', this._updateDisabled, this);
    return container;
  },
  onRemove: function(map) {
    map.off('zoomend zoomlevelschange', this._updateDisabled, this);
  },
  _addZoomFunction: function(button, fn) {
    L.DomEvent.on(button, 'mousedown dblclick', L.DomEvent.stopPropagation).on(button, 'click', L.DomEvent.stop).on(button, 'click', fn, this).on(button, 'click', this._refocusOnMap, this);
    return button;
  },
  _zoomIn: function(e) {
    this._map.zoomIn(e.shiftKey ? 3 : 1);
  },
  _zoomOut: function(e) {
    this._map.zoomOut(e.shiftKey ? 3 : 1);
  },
  _zoomHome: function(e) {
    this._map.setView([this._map.lat, this._map.lng], this._map.zoom);
  },
  _createButton: function(html, title, className, container, fn) {
    var link;
    link = L.DomUtil.create('a', className, container);
    link.innerHTML = html;
    link.href = '#';
    link.title = title;
    L.DomEvent.on(link, 'mousedown dblclick', L.DomEvent.stopPropagation).on(link, 'click', L.DomEvent.stop).on(link, 'click', fn, this).on(link, 'click', this._refocusOnMap, this);
    return link;
  },
  _updateDisabled: function() {
    var className, map;
    map = this._map;
    className = 'leaflet-disabled';
    L.DomUtil.removeClass(this._zoomInButton, className);
    L.DomUtil.removeClass(this._zoomOutButton, className);
    if (map._zoom === map.getMinZoom()) {
      L.DomUtil.addClass(this._zoomOutButton, className);
    }
    if (map._zoom === map.getMaxZoom()) {
      L.DomUtil.addClass(this._zoomInButton, className);
    }
  }
});
//
//module.exports.MaterialZoomControl = MaterialZoomControl;
//
//module.exports.materialZoomControl = function(options) {
//  return new MaterialZoomControl(options);
//};

// ---
// generated by coffee-script 1.9.2
